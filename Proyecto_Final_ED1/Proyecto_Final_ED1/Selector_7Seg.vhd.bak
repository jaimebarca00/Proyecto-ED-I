library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity Selector_7Seg is
		
		port ( 
			Reloj: in std_logic;
			num_BCD: in std_logic_vector (7 downto 0); 
			Displays : out  std_logic_vector (1 downto 0);
         Segmentos : out  std_logic_vector (6 downto 0)
			);
         
end Selector_7Seg;


 architecture Seleccionar of Selector_7Seg is
 
	component BCD_a_7seg is 
    Port ( BCD 		: in  std_logic_vector (3 downto 0);
           Siete_Seg : out  std_logic_vector (6 downto 0)
			 ); 
	end component;
 
	
	signal Cuenta: integer range 0 to 100000;
	signal Seleccion: std_logic := '0';
	signal Mostrar: std_logic_vector(1 downto 0):="00";
	signal U1,D1:std_logic_vector(6 downto 0);
	
Begin

	Unidades:BCD_a_7seg port map(num_BCD(3 downto 0),U1); -- 7 seg a unidades	
	Decenas:BCD_a_7seg port map(num_BCD(7 downto 4),D1); -- 7 seg a decenas
	
	Conteo_Clk: Process(Reloj)
	begin
		if falling_edge(Reloj) then 
			if Cuenta < 100000 then
				Cuenta<=Cuenta+1;
			else
				Seleccion<=not Seleccion;
				Cuenta<=0;
			end if;
		end if;
	end process;
	
	Mostrar_Displays: process(Seleccion, U1, D1) 
	begin	
	
		case Seleccion is
		
					when '0' => Mostrar <="10";
					when '1' => Mostrar <="01";
					when others => Mostrar <="11";
					
				end case;
			
		case Mostrar is	
		
					when "10" => Segmentos <=U1;
					when "01" => Segmentos <=D1;
					when others => Segmentos <="1111111";
					
		end case;				
	end process;		

	Displays<=Mostrar;
	


end Seleccionar;


--entity Selector_7Seg is
--		
--		port ( 
--			Reloj: in std_logic;
--			num_BCD: in std_logic_vector (7 downto 0); 
--			Displays : out  std_logic_vector (3 downto 0);
--         Segmentos : out  std_logic_vector (6 downto 0)
--			);
--         
--end Selector_7Seg;
--
--
-- architecture Seleccionar of Selector_7Seg is
-- 
--	component BCD_a_7seg is 
--    Port ( BCD 		: in  std_logic_vector (3 downto 0);
--           Siete_Seg : out  std_logic_vector (6 downto 0)
--			 ); 
--	end component;
-- 
--	
--	signal Cuenta: integer range 0 to 100000;
--	signal Seleccion: std_logic_vector(1 downto 0):="00";
--	signal Mostrar: std_logic_vector(3 downto 0):="0000";
--	signal Num0,Num1,Num2,Num3: std_logic_vector(6 downto 0);
--	signal U1,D1:std_logic_vector(6 downto 0);
--	
--Begin
--
--	Unidades:BCD_a_7seg port map(num_BCD(3 downto 0),U1); -- 7 seg a unidades	
--	Decenas:BCD_a_7seg port map(num_BCD(7 downto 4),D1); -- 7 seg a decenas
--	
--	Num3<="1111111";
--	Num2<="1111111";
--	Num1<=D1;
--	Num0<=U1;	
--	
--	Conteo_Clk: Process(Reloj)
--	begin
--		if falling_edge(Reloj) then
--			if Cuenta < 10 then
--				Cuenta<=Cuenta+1;
--			else
--				Seleccion<=Seleccion+1;
--				Cuenta<=0;
--			end if;
--		end if;
--	end process;
--	
--	Mostrar_Displays: process(Seleccion, Num0, Num1, Num2, Num3)
--	begin	
--	
--		case Seleccion is
--		
--					when "00" => Mostrar <="1110";
--					when "01" => Mostrar <="1101";
--					when "10" => Mostrar <="1011";
--					when "11" => Mostrar <="0111";
--					when others => Mostrar <="1111";
--					
--				end case;
--			
--		case Mostrar is	
--		
--					when "1110" => Segmentos <=Num0;
--					when "1101" => Segmentos <=Num1;
--					when "1011" => Segmentos <=Num2;
--					when "0111" => Segmentos <=Num3;
--					when others => Segmentos <="1111111";
--					
--		end case;				
--	end process;		
--
--	Displays<=Mostrar;